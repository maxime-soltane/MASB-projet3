(()=>{"use strict";class e extends Error{constructor(e){super(e)}}class t{constructor(t,r,i,s){if(t.isNullOrEmpty()||r.isNullOrEmpty()||i.isNullOrEmpty()||s.isNullOrEmpty())throw new e("Cannot construct base event without its required properties");this.event=t,this.event_name=t,this.event_category=r,this.event_action=i,this.event_label=s,this.method=s}get getEvent(){return this.event}get getEventName(){return this.event_name}get getEventCategory(){return this.event_category}get getEventAction(){return this.event_action}get getEventLabel(){return this.event_label}get getMethod(){return this.method}}class r extends t{constructor(e){super("login_started","account","login-started:social","social"),this.social_network=e}get getSocialNetwork(){return this.social_network}}class i{constructor(e){this._dataLayerService=e}execute(e){let t=new r(e.params.provider);this._dataLayerService.Push(t)}}class s extends t{constructor(){super("login_started","account","login-started:email","email")}}class o{constructor(e){this._dataLayerService=e}execute(){let e=new s;this._dataLayerService.Push(e)}}class a extends t{constructor(e){super("login","account","login-successful","email"),this.login_status="true",this.user_id=e}get getLoginStatus(){return this.login_status}get getUserId(){return this.user_id}}class c{constructor(e){this._dataLayerService=e}execute(e){let t=new a(e.response.UID);this._dataLayerService.Push(t)}}class n extends t{constructor(e,t){super("login_error","account","login-error","email"),this.error_code=e,this.error_name=t}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class p{constructor(e){this._dataLayerService=e}execute(e){let t=new n(e.response.errorCode,e.response.errorMessage);this._dataLayerService.Push(t)}}class l extends t{constructor(e,t){super("login","account","login-successful","social"),this.login_status="true",this.user_id=e,this.social_network=t}get getLoginStatus(){return this.login_status}get getUserId(){return this.user_id}get getSocialNetwork(){return this.social_network}}class u{constructor(e){this._dataLayerService=e}execute(e){let t=new l(e.response.UID,e.response.requestParams.provider);this._dataLayerService.Push(t)}}class h extends t{constructor(e,t,r){super("login_error","account","login-error","social"),this.social_network=e,this.error_code=t,this.error_name=r}get getsocialNetwork(){return this.social_network}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class g{constructor(e){this._dataLayerService=e}execute(e){let t=new h(e.response.requestParams.provider,e.response.errorCode,e.response.errorMessage);this._dataLayerService.Push(t)}}class d extends t{constructor(e){super("sign_up","form:registration","completed_registration","email"),this.user_registration_type="email",this.user_id=e}get getRegistrationType(){return this.user_registration_type}get getUserID(){return this.user_id}}class S{constructor(e){this._dataLayerService=e}execute(e){let t=new d(e.response.UID);this._dataLayerService.Push(t)}}class _ extends t{constructor(e){super("sign_up_step","form:registration",`completed_step${e}`,"email"),this.step_number=e}get getStepNumber(){return this.step_number}}class v{constructor(e){this._dataLayerService=e}execute(e){let t=new _(e);this._dataLayerService.Push(t)}}class m extends t{constructor(e,t,r){super("sign_up_error","form:registration",`completed_step${e}`,"email"),this.step_number=e,this.error_code=t,this.error_name=r}get getStepNumber(){return this.step_number}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class L{constructor(e){this._dataLayerService=e}execute(e,t){let r=new m(t,e.response.errorCode,e.response.errorMessage);this._dataLayerService.Push(r)}}class y extends t{constructor(e,t){super("sign_up_step","form:registration",`completed_step${e}`,t),this.social_network=t,this.step_number=e}get getSocialNetwork(){return this.social_network}get getStepNumber(){return this.step_number}}class C{constructor(e){this._dataLayerService=e}execute(e,t){let r=new y(t,e);this._dataLayerService.Push(r)}}class A extends t{constructor(e,t,r,i){super("sign_up_error","form:registration",`completed_step${e}`,t),this.social_network=t,this.step_number=e,this.error_code=r,this.error_name=i}get getSocialNetwork(){return this.social_network}get getStepNumber(){return this.step_number}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class E{constructor(e){this._dataLayerService=e}execute(e,t,r){let i=new A(r,t,e.response.errorCode,e.response.errorMessage);this._dataLayerService.Push(i)}}class f extends t{constructor(e,t){super("sign_up_error","form:registration","completed_registration_error","email"),this.error_code=e,this.error_name=t}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class w{constructor(e){this._dataLayerService=e}execute(e){let t=new f(e.response.errorCode,e.response.errorMessage);this._dataLayerService.Push(t)}}class R extends t{constructor(e){super("sign_up","form:registration","completed_registration","lite"),this.user_registration_type="email",this.user_id=e}get getRegistrationType(){return this.user_registration_type}get getUserID(){return this.user_id}}class x{constructor(e){this._dataLayerService=e}execute(e){let t=new R(e.response.UID);this._dataLayerService.Push(t)}}class k extends t{constructor(e,t){super("sign_up_error","form:registration","completed_registration_error","lite"),this.error_code=e,this.error_name=t}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class P{constructor(e){this._dataLayerService=e}execute(e){let t=new k("","");this._dataLayerService.Push(t)}}class N extends t{constructor(e,t){super("sign_up","form:registration","completed_registration","social"),this.user_registration_type="social",this.user_id=e,this.social_network=t}get getRegistrationType(){return this.user_registration_type}get getUserID(){return this.user_id}get getSocialNetwork(){return this.social_network}}class I{constructor(e){this._dataLayerService=e}execute(e,t){let r=new N(e.response.UID,t);this._dataLayerService.Push(r)}}class b extends t{constructor(e,t,r){super("sign_up_error","form:registration","completed_registration_error",e),this.social_network=e,this.error_code=t,this.error_name=r}get getSocialNetwork(){return this.social_network}get getErrorCode(){return this.error_code}get getErrorName(){return this.error_name}}class D{constructor(e){this._dataLayerService=e}execute(e,t){let r=new b(t,e.response.errorCode,e.response.errorMessage);this._dataLayerService.Push(r)}}class M extends t{constructor(e,t){super("login_account_link","account","login-successful","social"),this.login_status="true",this.user_id=e,this.social_network=t}get getLoginStatus(){return this.login_status}get getUserId(){return this.user_id}get getSocialNetwork(){return this.social_network}}class X{constructor(e){this._dataLayerService=e}execute(e,t){let r=new M(e.response.UID,t);this._dataLayerService.Push(r)}}class O{static createSocialCompleteRegistrationApplicationService(){return new I(this._dataLayerService)}static createAccountLinkApplicationService(){return new X(this._dataLayerService)}static createSocialErrorCompleteRegistrationApplicationService(){return new D(this._dataLayerService)}static createLoginSucceedApplicationService(){return new c(this._dataLayerService)}static createCompleteRegistrationApplicationService(){return new S(this._dataLayerService)}static createCompleteStepXApplicationService(){return new v(this._dataLayerService)}static createSocialLoginErrorApplicationService(){return new g(this._dataLayerService)}static createErrorCompleteStepXApplicationService(){return new L(this._dataLayerService)}static createSocialCompleteStepXApplicationService(){return new C(this._dataLayerService)}static createSocialErrorCompleteStepXApplicationService(){return new E(this._dataLayerService)}static createErrorCompleteRegistrationApplicationService(){return new w(this._dataLayerService)}static createLiteRegistrationApplicationService(){return new x(this._dataLayerService)}static createLiteRegistrationErrorApplicationService(){return new P(this._dataLayerService)}static createSocialLoginSucceedApplicationService(){return new u(this._dataLayerService)}static createSocialLoginStartedApplicationService(){return new i(this._dataLayerService)}static createLoginErrorApplicationService(){return new p(this._dataLayerService)}static createLoginStartedApplicationService(){return new o(this._dataLayerService)}}O._dataLayerService=new class{Push(e){window.dataLayer=window.dataLayer||[],window.dataLayer.push(e),window.logDataLayerEvents&&console.log(JSON.stringify(e))}},String.prototype.isNullOrEmpty=function(){return null==this||""===this},String.empty="";const U=new class{constructor(e,t,r,i,s,o,a,c,n,p,l,u,h,g,d,S,_){this.beforeRequestMap=new Map,this.afterResponseMap=new Map,this.noErrorCode=0,this.pendingProfileInfoErrorCode=206001,this.accountsLinkedErrorCode=200009,this.accountPendingVerification=206002,this._loginStartedApplicationService=e,this._socialLoginStartedApplicationService=t,this._loginSucceedApplicationService=r,this._loginErrorApplicationService=i,this._socialLoginSucceedApplicationService=s,this._socialLoginErrorApplicationService=o,this._completeStepXApplicationService=c,this._errorCompleteStepXApplicationService=n,this._socialCompleteStepXApplicationService=p,this._socialErrorCompleteStepXApplicationService=l,this._liteRegistrationApplicationService=u,this._liteRegistrationErrorApplicationService=h,this._completeRegistrationApplicationService=a,this._errorCompleteRegistrationApplicationService=g,this._socialCompleteRegistrationApplicationService=d,this._socialErrorCompleteRegistrationApplicationService=S,this._accountLinkApplicationService=_,this.SetDefaultValues(),this.SetupStrategy()}SetupStrategy(){this.afterResponseMap.set("/accounts.initRegistration",(e=>{var t=e.response,r=t.requestParams;this.isNullOrEmptyOrUndefined(r)||(r.isLite?parseInt(t.errorCode)!==this.noErrorCode?this._liteRegistrationErrorApplicationService.execute(e):this.isLiteRegistration=!0:this.registrationToken=t.regToken)})),this.afterResponseMap.set("/accounts.login",(e=>{var t=e.response;if(parseInt(t.errorCode)!==this.noErrorCode)return t.errorCode==this.pendingProfileInfoErrorCode?(this.isNullOrEmptyOrUndefined(this.registrationToken)||(this.isSocialRegistration=!1),this.stepsCounter++,void this._completeStepXApplicationService.execute(this.stepsCounter)):t.errorCode==this.accountsLinkedErrorCode?void this._accountLinkApplicationService.execute(e,this.socialProvider):void this._loginErrorApplicationService.execute(e);this._loginSucceedApplicationService.execute(e)})),this.afterResponseMap.set("/accounts.register",(e=>{var t=e.response;return parseInt(t.errorCode)!==this.noErrorCode||parseInt(t.errorCode)!==this.accountPendingVerification?(this._completeRegistrationApplicationService.execute(e),void this.SetDefaultValues()):t.errorCode==this.pendingProfileInfoErrorCode?(this.stepsCounter++,void this._completeStepXApplicationService.execute(this.stepsCounter)):this.stepsCounter>0?(this._errorCompleteStepXApplicationService.execute(e,this.stepsCounter),void this.SetDefaultValues()):(this._errorCompleteRegistrationApplicationService.execute(e),void this.SetDefaultValues())})),this.afterResponseMap.set("/accounts.setAccountInfo",(e=>{if(this.isLiteRegistration)this._liteRegistrationApplicationService.execute(e);else if(!(this.stepsCounter<=0)){var t=e.response;if(parseInt(t.errorCode)===this.noErrorCode)return this.stepsCounter++,this.isSocialRegistration?void this._socialCompleteStepXApplicationService.execute(this.socialProvider,this.stepsCounter):void this._completeStepXApplicationService.execute(this.stepsCounter);this.isSocialRegistration?this._socialErrorCompleteStepXApplicationService.execute(e,this.socialProvider,this.stepsCounter):this._errorCompleteStepXApplicationService.execute(e,this.stepsCounter),this.SetDefaultValues()}})),this.afterResponseMap.set("/accounts.finalizeRegistration",(e=>{var t=e.response;return parseInt(t.errorCode)!==this.noErrorCode||parseInt(t.errorCode)!==this.accountPendingVerification?this.isSocialRegistration?(this._socialCompleteRegistrationApplicationService.execute(e,this.socialProvider),void this.SetDefaultValues()):(this._completeRegistrationApplicationService.execute(e),void this.SetDefaultValues()):this.isSocialRegistration?(this._socialErrorCompleteRegistrationApplicationService.execute(e,this.socialProvider),void this.SetDefaultValues()):(this._errorCompleteRegistrationApplicationService.execute(e),void this.SetDefaultValues())})),this.afterResponseMap.set("/accounts.socialLogin",(e=>{var t=e.response,r=parseInt(t.errorCode)!==this.noErrorCode;if(this.socialProvider=e.response.requestParams.provider,r)return this.isNullOrEmptyOrUndefined(this.registrationToken)||(this.isSocialRegistration=!0),t.errorCode==this.pendingProfileInfoErrorCode?(this.stepsCounter++,void this._socialCompleteStepXApplicationService.execute(this.socialProvider,this.stepsCounter)):(this._socialLoginErrorApplicationService.execute(e),void this.SetDefaultValues());this._socialLoginSucceedApplicationService.execute(e)})),this.beforeRequestMap.set("accounts.login",(e=>{this._loginStartedApplicationService.execute()})),this.beforeRequestMap.set("accounts.socialLogin",(e=>{this._socialLoginStartedApplicationService.execute(e)}))}afterResponseEvent(e){var t=e.response.operation;if(!this.isNullOrEmptyOrUndefined(t))try{var r=this.afterResponseMap.get(t);if(!r)return;r(e)}catch(e){console.log(e)}}beforeRequestEvent(e){var t=e.methodName;if(!this.isNullOrEmptyOrUndefined(t))try{var r=this.beforeRequestMap.get(t);if(!r)return;r(e)}catch(e){console.log(e)}}closeScreenSetEvent(e){this.SetDefaultValues()}SetDefaultValues(){this.stepsCounter=0,this.registrationToken=String.empty,this.socialProvider=String.empty,this.isSocialRegistration=!1,this.isLiteRegistration=!1}isNullOrEmptyOrUndefined(e){return null==e||""===e}}(O.createLoginStartedApplicationService(),O.createSocialLoginStartedApplicationService(),O.createLoginSucceedApplicationService(),O.createLoginErrorApplicationService(),O.createSocialLoginSucceedApplicationService(),O.createSocialLoginErrorApplicationService(),O.createCompleteRegistrationApplicationService(),O.createCompleteStepXApplicationService(),O.createErrorCompleteStepXApplicationService(),O.createSocialCompleteStepXApplicationService(),O.createSocialErrorCompleteStepXApplicationService(),O.createLiteRegistrationApplicationService(),O.createLiteRegistrationErrorApplicationService(),O.createErrorCompleteRegistrationApplicationService(),O.createSocialCompleteRegistrationApplicationService(),O.createSocialErrorCompleteRegistrationApplicationService(),O.createAccountLinkApplicationService()),V=window;V.trackBeforeRequestEvents=function(e){U.beforeRequestEvent(e)},V.trackAfterResponseEvents=function(e){U.afterResponseEvent(e)},V.trackCloseScreensetEvents=function(e){U.closeScreenSetEvent(e)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,